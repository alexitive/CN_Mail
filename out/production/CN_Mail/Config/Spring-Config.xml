<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
                        http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd
                        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">



    <util:properties id="prop" location="Config/MailServer.properties"/>

    <context:component-scan base-package="Bean,Config,Dao,Service,Util"></context:component-scan>
<!--    引入数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="url" value="jdbc:mysql://81.70.104.60:3306/javamail" />
        <property name="username" value="root"/>
        <property name="password" value="123456cc"/>
        <property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
    </bean>




    <!--    创建jdbcTemplate对象,注入dataSource-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

<!--    事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 开始基于注解的事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>


    <!-- 创建 SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
<!--        configLocation指定全局配置文件的位置-->
        <property name="configLocation" value="Config/mybatis-config.xml"></property>
<!--        mapperLocations指定mapper文件的位置-->
        <property name="mapperLocations" value="Config/mybatis/mapper/*.xml"></property>
    </bean>

    <!-- 获取 SqlSession 对象，并交由 spring 管理  用SqlSessionTemplate得到的SqlSession可以不用我们自己操心事务的管理，以及关闭操作-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <!-- 给 SqlSessionTemplate 的构造函数赋值-->
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>

    <!-- 扫描所有的mapper接口的实现，让他们可以自动注入  autowire-->
    <mybatis:scan base-package="Dao" />

</beans>